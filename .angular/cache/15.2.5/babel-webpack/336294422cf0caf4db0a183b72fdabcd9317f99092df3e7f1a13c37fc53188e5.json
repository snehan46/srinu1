{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(router, http) {\n    this.router = router;\n    this.http = http;\n  }\n  isAuthenticated() {\n    if (sessionStorage.getItem('token') !== null) {\n      return true;\n    }\n    return false;\n  }\n  canAccess() {\n    if (!this.isAuthenticated()) {\n      //redirect to login\n      this.router.navigate(['/login']);\n    }\n  }\n  canAuthenticate() {\n    if (this.isAuthenticated()) {\n      //redirect to dashboard\n      this.router.navigate(['/dashboard']);\n    }\n  }\n  register(name, email, password) {\n    //send data to register api (firebase)\n    return this.http.post('https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyBub3wrtkTOA_TyXUPpY3zcd3N15ymeVF8', {\n      displayName: name,\n      email,\n      password\n    });\n  }\n  storeToken(token) {\n    sessionStorage.setItem('token', token);\n  }\n  login(email, password) {\n    //send data to login api (firebase)\n    return this.http.post('https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyBub3wrtkTOA_TyXUPpY3zcd3N15ymeVF8', {\n      email,\n      password\n    });\n  }\n  detail() {\n    let token = sessionStorage.getItem('token');\n    return this.http.post('https://identitytoolkit.googleapis.com/v1/accounts:lookup?key=AIzaSyBub3wrtkTOA_TyXUPpY3zcd3N15ymeVF8', {\n      idToken: token\n    });\n  }\n  removeToken() {\n    sessionStorage.removeItem('token');\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.HttpClient));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;AAOA,OAAM,MAAOA,WAAW;EAEtBC,YAAoBC,MAAa,EAASC,IAAe;IAArC,WAAM,GAAND,MAAM;IAAgB,SAAI,GAAJC,IAAI;EAAe;EAE7DC,eAAe;IACb,IAAIC,cAAc,CAACC,OAAO,CAAC,OAAO,CAAC,KAAG,IAAI,EAAE;MACxC,OAAO,IAAI;;IAEf,OAAO,KAAK;EACd;EAEAC,SAAS;IACP,IAAI,CAAC,IAAI,CAACH,eAAe,EAAE,EAAE;MACzB;MACA,IAAI,CAACF,MAAM,CAACM,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;;EAEtC;EACAC,eAAe;IACb,IAAI,IAAI,CAACL,eAAe,EAAE,EAAE;MAC1B;MACA,IAAI,CAACF,MAAM,CAACM,QAAQ,CAAC,CAAC,YAAY,CAAC,CAAC;;EAExC;EAEAE,QAAQ,CAACC,IAAW,EAACC,KAAY,EAACC,QAAe;IAC7C;IACD,OAAO,IAAI,CAACV,IAAI,CACdW,IAAI,CACH,uGAAuG,EACrG;MAACC,WAAW,EAACJ,IAAI;MAACC,KAAK;MAACC;IAAQ,CAAC,CACpC;EACL;EAEAG,UAAU,CAACC,KAAY;IACnBZ,cAAc,CAACa,OAAO,CAAC,OAAO,EAACD,KAAK,CAAC;EACzC;EAEAE,KAAK,CAACP,KAAY,EAACC,QAAe;IAChC;IACE,OAAO,IAAI,CAACV,IAAI,CACfW,IAAI,CACD,mHAAmH,EACjH;MAACF,KAAK;MAACC;IAAQ,CAAC,CACrB;EACL;EAEAO,MAAM;IACJ,IAAIH,KAAK,GAAGZ,cAAc,CAACC,OAAO,CAAC,OAAO,CAAC;IAE3C,OAAO,IAAI,CAACH,IAAI,CAACW,IAAI,CACjB,uGAAuG,EACvG;MAACO,OAAO,EAACJ;IAAK,CAAC,CAClB;EACH;EAEAK,WAAW;IACTjB,cAAc,CAACkB,UAAU,CAAC,OAAO,CAAC;EACpC;;AAzDWvB,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAwB,SAAXxB,WAAW;EAAAyB,YAFV;AAAM","names":["AuthService","constructor","router","http","isAuthenticated","sessionStorage","getItem","canAccess","navigate","canAuthenticate","register","name","email","password","post","displayName","storeToken","token","setItem","login","detail","idToken","removeToken","removeItem","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\sriva\\Desktop\\Sales-Forecasting-AngularTs-main\\Sales-Forecasting-AngularTs-main\\sales\\src\\app\\_services\\auth.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  constructor(private router:Router,private http:HttpClient) { }\n\n  isAuthenticated():boolean{\n    if (sessionStorage.getItem('token')!==null) {\n        return true;\n    }\n    return false;\n  }\n\n  canAccess(){\n    if (!this.isAuthenticated()) {\n        //redirect to login\n        this.router.navigate(['/login']);\n    }\n  }\n  canAuthenticate(){\n    if (this.isAuthenticated()) {\n      //redirect to dashboard\n      this.router.navigate(['/dashboard']);\n    }\n  }\n\n  register(name:string,email:string,password:string){\n      //send data to register api (firebase)\n     return this.http\n      .post<{idToken:string}>(\n        'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyBub3wrtkTOA_TyXUPpY3zcd3N15ymeVF8',\n          {displayName:name,email,password}\n      );\n  }\n\n  storeToken(token:string){\n      sessionStorage.setItem('token',token);\n  }\n\n  login(email:string,password:string){\n    //send data to login api (firebase)\n      return this.http\n      .post<{idToken:string}>(\n          'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyBub3wrtkTOA_TyXUPpY3zcd3N15ymeVF8',\n            {email,password}\n      );\n  }\n\n  detail(){\n    let token = sessionStorage.getItem('token');\n\n    return this.http.post<{users:Array<{localId:string,displayName:string,email:string}>}>(\n        'https://identitytoolkit.googleapis.com/v1/accounts:lookup?key=AIzaSyBub3wrtkTOA_TyXUPpY3zcd3N15ymeVF8',\n        {idToken:token}\n    );\n  }\n\n  removeToken(){\n    sessionStorage.removeItem('token');\n  }\n\n\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}